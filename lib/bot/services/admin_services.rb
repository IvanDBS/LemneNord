module AdminServices
  class << self
    def show_statistics(bot, message)
      stats = nil
      RedisConfig::REDIS.with do |redis|
        stats = redis.get("admin_stats")
        if stats.nil?
          stats = {
            total_users: User.count,
            total_orders: Application.count,
            pending_orders: Application.where(status: 'pending').count,
            approved_orders: Application.where(status: 'approved').count,
            rejected_orders: Application.where(status: 'rejected').count
          }
          redis.set("admin_stats", stats.to_json, ex: 300) # expires in 5 minutes
        else
          stats = JSON.parse(stats, symbolize_names: true)
        end
      end

      text = generate_stats_text(stats)
      
      bot.api.send_message(
        chat_id: message.chat.id,
        text: text,
        reply_markup: AdminKeyboard.menu
      )
    rescue => e
      ErrorHandler.handle(bot, e, message.chat.id)
    end

    def show_filtered_orders(bot, message, status)
      orders = Application.where(status: status).order(created_at: :desc).limit(10)
      
      if orders.empty?
        bot.api.send_message(
          chat_id: message.chat.id,
          text: "–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º #{get_status_text(status)}",
          reply_markup: AdminKeyboard.menu
        )
        return
      end

      orders.each do |order|
        OrderService.show_order_details(bot, message, order)
      end
    end

    def approve_order(bot, callback, application_id)
      application = Application.find(application_id)
      application.update(status: 'approved')
      
      # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
      message = if application.user.language == 'ru'
        "‚úÖ –í–∞—à –∑–∞–∫–∞–∑ #{application.reference_number} –æ–¥–æ–±—Ä–µ–Ω!"
      else
        "‚úÖ Comanda dvs. #{application.reference_number} a fost aprobatƒÉ!"
      end
      
      bot.api.send_message(
        chat_id: application.user.telegram_id,
        text: message
      )
      
      # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
      bot.api.edit_message_text(
        chat_id: callback.from.id,
        message_id: callback.message.message_id,
        text: "#{callback.message.text}\n\n‚úÖ –ó–∞–∫–∞–∑ –æ–¥–æ–±—Ä–µ–Ω"
      )
    end

    def reject_order(bot, callback, application_id)
      application = Application.find(application_id)
      application.update(status: 'rejected')
      
      # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –µ–≥–æ —è–∑—ã–∫–µ
      message = if application.user.language == 'ru'
        "‚ùå –í–∞—à –∑–∞–∫–∞–∑ #{application.reference_number} –æ—Ç–∫–ª–æ–Ω–µ–Ω"
      else
        "‚ùå Comanda dvs. #{application.reference_number} a fost respinsƒÉ"
      end
      
      bot.api.send_message(
        chat_id: application.user.telegram_id,
        text: message
      )
      
      # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
      bot.api.edit_message_text(
        chat_id: callback.from.id,
        message_id: callback.message.message_id,
        text: "#{callback.message.text}\n\n‚ùå –ó–∞–∫–∞–∑ –æ—Ç–∫–ª–æ–Ω–µ–Ω"
      )
    end

    def ignore_order(bot, callback, application_id)
      application = Application.find(application_id)
      application.update(status: 'ignored')
      
      # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É –∞–¥–º–∏–Ω–∞
      bot.api.edit_message_text(
        chat_id: callback.from.id,
        message_id: callback.message.message_id,
        text: "#{callback.message.text}\n\n‚è≥ –ó–∞–∫–∞–∑ –æ—Ç–ª–æ–∂–µ–Ω"
      )
    end

    def broadcast_message(bot, message, text)
      success_count = 0
      fail_count = 0
      
      User.where.not(telegram_id: message.from.id).find_each do |user|
        BroadcastJob.perform_later(user.id, text)
        success_count += 1
      rescue => e
        fail_count += 1
        ErrorHandler.handle(bot, e)
      end

      bot.api.send_message(
        chat_id: message.chat.id,
        text: "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–ø—É—â–µ–Ω–∞\n‚úÖ –í –æ—á–µ—Ä–µ–¥–∏: #{success_count}\n‚ùå –û—à–∏–±–æ–∫: #{fail_count}",
        reply_markup: AdminKeyboard.menu
      )
    end

    def broadcast_channel_message(bot, message)
      channel_message = <<~MESSAGE
        üå≥ –î—Ä–æ–≤–∞ —Å –¥–æ—Å—Ç–∞–≤–∫–æ–π –ø–æ –≤—Å–µ–π –ú–æ–ª–¥–æ–≤–µ!

        ‚ñ´Ô∏è –î—É–±: 1500 –ª–µ–π/—Å–∫–ª–∞–¥–æ–º–µ—Ç—Ä
        ‚ñ´Ô∏è –ê–∫–∞—Ü–∏—è: 1300 –ª–µ–π/—Å–∫–ª–∞–¥–æ–º–µ—Ç—Ä

        ‚úÖ –ë—ã—Å—Ç—Ä–∞—è –¥–æ—Å—Ç–∞–≤–∫–∞
        ‚úÖ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å
        ‚úÖ –ù–∞–¥–µ–∂–Ω—ã–π –ø–æ—Å—Ç–∞–≤—â–∏–∫

        ----

        üå≥ Lemne cu livrare √Æn toatƒÉ Moldova!

        ‚ñ´Ô∏è Stejar: 1500 lei/ster
        ‚ñ´Ô∏è Salc√¢m: 1300 lei/ster

        ‚úÖ Livrare rapidƒÉ
        ‚úÖ Serviciu de calitate
        ‚úÖ Furnizor de √Æncredere

        üëá –î–ª—è –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ —Å—é–¥–∞ / Pentru comandƒÉ click aici üëá
      MESSAGE

      # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –±–æ—Ç—É
      keyboard = Telegram::Bot::Types::InlineKeyboardMarkup.new(
        inline_keyboard: [
          [
            {
              text: 'ü§ñ –ó–∞–∫–∞–∑–∞—Ç—å / ComandƒÉ',
              url: 'https://t.me/LemneNordLivrare_bot'
            }
          ]
        ]
      )

      begin
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
        bot.api.send_message(
          chat_id: Config::CHANNEL_ID,
          text: channel_message,
          reply_markup: keyboard,
          parse_mode: 'HTML'
        )

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
        bot.api.send_message(
          chat_id: message.chat.id,
          text: "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª",
          reply_markup: AdminKeyboard.menu
        )
      rescue => e
        bot.api.send_message(
          chat_id: message.chat.id,
          text: "‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: #{e.message}",
          reply_markup: AdminKeyboard.menu
        )
      end
    end

    private

    def get_status_text(status)
      case status
      when 'pending' then '‚è≥ –û–∂–∏–¥–∞–µ—Ç'
      when 'approved' then '‚úÖ –û–¥–æ–±—Ä–µ–Ω'
      when 'rejected' then '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω'
      when 'ignored' then '‚è≥ –û—Ç–ª–æ–∂–µ–Ω'
      else status
      end
    end

    def generate_stats_text(stats)
      <<~STATS
        üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:

        üë• –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: #{stats[:total_users]}
        üì¶ –í—Å–µ–≥–æ –∑–∞–∫–∞–∑–æ–≤: #{stats[:total_orders]}
        
        ‚è≥ –û–∂–∏–¥–∞—é—Ç: #{stats[:pending_orders]}
        ‚úÖ –ü—Ä–∏–Ω—è—Ç—ã: #{stats[:approved_orders]}
        ‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω—ã: #{stats[:rejected_orders]}
      STATS
    end
  end
end 