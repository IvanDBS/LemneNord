module OrderService
  class << self
    def create_order(bot, callback, user, product_code)
      product = find_product(user.language, product_code)
      return unless product

      begin
        # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "—á–∞—Å–∏–∫–∏"
        bot.api.answer_callback_query(callback_query_id: callback.id)

        # –°–æ–∑–¥–∞–µ–º –∑–∞–∫–∞–∑ –±–µ–∑ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ quantity
        application = user.applications.new(
          status: 'draft',
          product_code: product[:code],
          product_name: product[:name],
          application_step: 'quantity',
          price: product[:price]
        )
        
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —á–µ—Ä–Ω–æ–≤–∏–∫–∞
        application.save(validate: false)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–¥—É–∫—Ç–µ
        product_info = [
          product[:name],
          product[:description].gsub('\\n', "\n")
        ].join("\n\n")
        
        bot.api.send_message(
          chat_id: callback.from.id,
          text: "#{product_info}\n\n#{Messages::MESSAGES[user.language][:enter_quantity]}"
        )
      rescue => e
        ErrorHandler.handle(bot, e, callback.from.id)
      end
    end

    def show_order_details(bot, message, order)
      begin
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        return unless order.quantity && order.price

        total_price = order.quantity * order.price
        
        # –ü–æ–ª—É—á–∞–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –Ω–∞ —Ç–µ–∫—É—â–µ–º —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        current_product = find_product(order.user.language, order.product_code)
        product_name = current_product ? current_product[:name] : order.product_name
        
        text = if order.user.language == 'ru'
          <<~TEXT
            üì¶ –ó–∞–∫–∞–∑ #{order.reference_number}
            
            üå≥ –¢–æ–≤–∞—Ä: #{product_name}
            üìù –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: #{order.quantity} #{TextHelper.pluralize_ster(order.quantity)}
            üí∞ –¶–µ–Ω–∞ –∑–∞ —Å–∫–ª–∞–¥–æ–º–µ—Ç—Ä: #{order.price} –ª–µ–π
            üíµ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: #{total_price} –ª–µ–π
            
            üìç –ê–¥—Ä–µ—Å: #{order.delivery_address}
            üì± –¢–µ–ª–µ—Ñ–æ–Ω: #{order.phone_number}
            
            üìÖ –î–∞—Ç–∞: #{order.created_at.in_time_zone('Europe/Chisinau').strftime("%d.%m.%Y %H:%M")}
            üìä –°—Ç–∞—Ç—É—Å: #{get_status_text(order.status)}
          TEXT
        else
          <<~TEXT
            üì¶ ComandƒÉ #{order.reference_number}
            
            üå≥ Produs: #{product_name}
            üìù Cantitate: #{order.quantity} #{TextHelper.pluralize_ster_ro(order.quantity)}
            üí∞ Pre»õ per ster: #{order.price} lei
            üíµ Cost total: #{total_price} lei
            
            üìç Adresa: #{order.delivery_address}
            üì± Telefon: #{order.phone_number}
            
            üìÖ Data: #{order.created_at.in_time_zone('Europe/Chisinau').strftime("%d.%m.%Y %H:%M")}
            üìä Status: #{get_status_text(order.status)}
          TEXT
        end

        bot.api.send_message(
          chat_id: message.chat.id,
          text: text,
          reply_markup: is_admin?(message) && order.status == 'pending' ? AdminKeyboard.application_buttons(order.id) : nil
        )
      rescue => e
        ErrorHandler.handle(bot, e, message.chat.id)
      end
    end

    def get_status_text(status)
      if @user&.language == 'ru'
        case status
        when 'pending' then '‚è≥ –û–∂–∏–¥–∞–µ—Ç'
        when 'approved' then '‚úÖ –û–¥–æ–±—Ä–µ–Ω'
        when 'rejected' then '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω'
        when 'ignored' then '‚è≥ –û—Ç–ª–æ–∂–µ–Ω'
        else status
        end
      else
        case status
        when 'pending' then '‚è≥ √én a»ôteptare'
        when 'approved' then '‚úÖ AprobatƒÉ'
        when 'rejected' then '‚ùå RespinsƒÉ'
        when 'ignored' then '‚è≥ Am√¢natƒÉ'
        else status
        end
      end
    end

    def handle_order_step(bot, message, user)
      # –ò—Å–ø–æ–ª—å–∑—É–µ–º –±–ª–æ–∫–∏—Ä–æ–≤–∫—É —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
      Application.transaction do
        application = user.applications.lock.where(status: ['draft', 'pending']).last
        return unless application

        case application.application_step
        when 'quantity'
          handle_quantity(bot, message, application)
        when 'address'
          handle_address(bot, message, application)
        when 'phone'
          handle_phone(bot, message, application)
        end
      end
    rescue => e
      ErrorHandler.handle(bot, e, message.chat.id)
    end

    def handle_phone(bot, message, application)
      if message.text.start_with?('üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä', 'üì± Folosi»õi numƒÉrul salvat')
        if application.user.last_phone.present?
          # –û—á–∏—â–∞–µ–º —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
          clean_phone = application.user.last_phone.gsub(/[^\d\+]/, '').strip
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ –Ω–æ–º–µ—Ä–∞
          unless clean_phone.match?(/^[\d\+]{10,}$/)
            bot.api.send_message(
              chat_id: message.chat.id,
              text: application.user.language == 'ru' ? 
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" :
                "NumƒÉrul salvat nu este valid. VƒÉ rugƒÉm sƒÉ introduce»õi un numƒÉr nou"
            )
            return
          end
          
          complete_order(bot, message, application, clean_phone)
          return
        end
      end

      # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–ª–µ—Ñ–æ–Ω –æ—Ç –≤—Å–µ–≥–æ –∫—Ä–æ–º–µ —Ü–∏—Ñ—Ä –∏ +
      clean_phone = message.text.gsub(/[^\d\+]/, '').strip
      
      unless clean_phone.match?(/^[\d\+]{10,}$/)
        bot.api.send_message(
          chat_id: message.chat.id,
          text: application.user.language == 'ru' ? 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞" :
            "VƒÉ rugƒÉm sƒÉ introduce»õi un numƒÉr de telefon valid"
        )
        return
      end

      application.user.update(last_phone: clean_phone)
      complete_order(bot, message, application, clean_phone)
    end

    def handle_address(bot, message, application)
      if message.text.start_with?('üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å', 'üìç Folosi»õi adresa salvatƒÉ')
        if application.user.last_address.present?
          # –û—á–∏—â–∞–µ–º –∞–¥—Ä–µ—Å –æ—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –Ω–∞–∫–æ–ø–ª–µ–Ω–∏–π
          clean_address = application.user.last_address.gsub(/\(.*\)/, '').strip
          
          # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É –∞–¥—Ä–µ—Å–∞
          if clean_address.length < 5
            bot.api.send_message(
              chat_id: message.chat.id,
              text: application.user.language == 'ru' ? 
                "–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –∞–¥—Ä–µ—Å" :
                "Adresa salvatƒÉ este prea scurtƒÉ. VƒÉ rugƒÉm sƒÉ introduce»õi o adresƒÉ nouƒÉ"
            )
            return
          end
          
          application.update(
            delivery_address: clean_address,
            application_step: 'phone'
          )
          
          bot.api.send_message(
            chat_id: message.chat.id,
            text: Messages::MESSAGES[application.user.language][:enter_phone],
            reply_markup: saved_phone_keyboard(application.user)
          )
          return
        end
      end

      if message.text.length < 5
        bot.api.send_message(
          chat_id: message.chat.id,
          text: application.user.language == 'ru' ? 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å" :
            "VƒÉ rugƒÉm sƒÉ introduce»õi o adresƒÉ validƒÉ"
        )
        return
      end

      # –û—á–∏—â–∞–µ–º –≤–≤–µ–¥–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å
      clean_address = message.text.gsub(/\(.*\)/, '').strip
      
      application.user.update(last_address: clean_address)
      application.update(
        delivery_address: clean_address,
        application_step: 'phone'
      )

      bot.api.send_message(
        chat_id: message.chat.id,
        text: Messages::MESSAGES[application.user.language][:enter_phone],
        reply_markup: saved_phone_keyboard(application.user)
      )
    end

    private

    def find_product(language, code)
      Application::AVAILABLE_PRODUCTS[language].find { |p| p[:code] == code }
    end

    def create_application(user, product)
      user.applications.create!(
        status: 'draft',
        product_code: product[:code],
        product_name: product[:name],
        application_step: 'quantity',
        price: product[:price]
      )
    end

    def send_product_info(bot, callback, user, product)
      product_info = [
        product[:name],
        product[:description].gsub('\\n', "\n")
      ].join("\n\n")
      
      bot.api.send_message(
        chat_id: callback.from.id,
        text: "#{product_info}\n\n#{Messages::MESSAGES[user.language][:enter_quantity]}"
      )
    end

    def handle_quantity(bot, message, application)
      quantity = message.text.to_i
      if quantity <= 0
        bot.api.send_message(
          chat_id: message.chat.id,
          text: application.user.language == 'ru' ? 
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ (–±–æ–ª—å—à–µ 0)" :
            "VƒÉ rugƒÉm sƒÉ introduce»õi o cantitate validƒÉ (mai mare de 0)"
        )
        return
      end

      application.update(quantity: quantity)
      
      total = quantity * application.price
      bot.api.send_message(
        chat_id: message.chat.id,
        text: Messages::MESSAGES[application.user.language][:price_info] % { 
          price: application.price,
          total: total
        }
      )

      application.update(application_step: 'address')
      
      # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤–≤–æ–¥–∞ –∞–¥—Ä–µ—Å–∞
      bot.api.send_message(
        chat_id: message.chat.id,
        text: Messages::MESSAGES[application.user.language][:enter_address],
        reply_markup: saved_address_keyboard(application.user)
      )
    end

    def generate_reference_number
      "LN-#{Time.now.strftime('%Y%m%d')}-#{rand(1000..9999)}"
    end

    def notify_about_order_creation(bot, message, application)
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∫–ª–∏–µ–Ω—Ç—É
      bot.api.send_message(
        chat_id: message.chat.id,
        text: Messages::MESSAGES[application.user.language][:application_submitted],
        reply_markup: UserKeyboard.menu(application.user.language)
      )

      # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
      NotificationService.notify_admins(bot, application)
    end

    def show_order_confirmation(bot, message, application)
      # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –±–ª–∞–≥–æ–¥–∞—Ä–Ω–æ—Å—Ç—å—é
      bot.api.send_message(
        chat_id: message.chat.id,
        text: Messages::MESSAGES[application.user.language][:application_submitted],
        reply_markup: UserKeyboard.menu(application.user.language) # –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–µ–Ω—é
      )
    end

    def complete_order(bot, message, application, phone)
      reference_number = generate_reference_number
      
      application.update!(
        phone_number: phone,
        status: 'pending',
        application_step: 'completed',
        reference_number: reference_number
      )

      notify_about_order_creation(bot, message, application)
    end

    def saved_address_keyboard(user)
      return nil unless user&.last_address.present?
      
      Telegram::Bot::Types::ReplyKeyboardMarkup.new(
        keyboard: [
          [{ text: user.language == 'ru' ? 
            "üìç –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∞–¥—Ä–µ—Å (#{user.last_address})" : 
            "üìç Folosi»õi adresa salvatƒÉ (#{user.last_address})" 
          }]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      )
    end

    def saved_phone_keyboard(user)
      return nil unless user&.last_phone.present?
      
      Telegram::Bot::Types::ReplyKeyboardMarkup.new(
        keyboard: [
          [{ text: user.language == 'ru' ? 
            "üì± –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä (#{user.last_phone})" : 
            "üì± Folosi»õi numƒÉrul salvat (#{user.last_phone})" 
          }]
        ],
        resize_keyboard: true,
        one_time_keyboard: true
      )
    end

    def is_admin?(message)
      Config::ADMIN_IDS.include?(message.from.id)
    end
  end
end 