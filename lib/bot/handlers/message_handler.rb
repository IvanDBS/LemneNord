# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
class MessageHandler
  def initialize(bot, message, admin_ids)
    @bot = bot
    @message = message
    @admin_ids = admin_ids
    @user = User.find_or_create_by(telegram_id: message.from.id)
  end

  def handle
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
    if @message.new_chat_members&.any?
      return WelcomeService.handle_new_member(@bot, @message)
    end

    return handle_start if @message.text == '/start'
    return handle_admin_message if @admin_ids.include?(@message.from.id)
    handle_user_message
  end

  private

  def handle_start
    @user.update(status: 'active')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–æ–º
    if @admin_ids.include?(@message.from.id)
      AdminKeyboard.show_menu(@bot, @message)
    else
      @bot.api.send_message(
        chat_id: @message.chat.id,
        text: Messages::MESSAGES['ru'][:welcome],
        reply_markup: UserKeyboard.language_selection
      )
    end
  end

  def handle_admin_message
    case @message.text
    when '/start', '/admin'
      AdminKeyboard.show_menu(@bot, @message)
    when 'üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞'
      AdminServices.show_statistics(@bot, @message)
    when '‚è≥ –û–∂–∏–¥–∞—é—â–∏–µ'
      AdminServices.show_filtered_orders(@bot, @message, 'pending')
    when '‚úÖ –ü—Ä–∏–Ω—è—Ç—ã–µ'
      AdminServices.show_filtered_orders(@bot, @message, 'approved')
    when '‚ùå –û—Ç–∫–ª–æ–Ω–µ–Ω–Ω—ã–µ'
      AdminServices.show_filtered_orders(@bot, @message, 'rejected')
    when 'üì¢ –†–∞—Å—Å—ã–ª–∫–∞'
      @user.update(status: 'waiting_for_broadcast')
      @bot.api.send_message(
        chat_id: @message.chat.id,
        text: "‚úçÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏:"
      )
    when 'üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª'
      AdminServices.broadcast_channel_message(@bot, @message)
    else
      case @user.status
      when 'waiting_for_broadcast'
        handle_broadcast_message
      else
        handle_user_message
      end
    end
  end

  def handle_broadcast_message
    success_count = 0
    error_count = 0
    admin_id = @message.from.id
    
    User.where.not(telegram_id: admin_id).find_each do |user|
      begin
        @bot.api.send_message(
          chat_id: user.telegram_id,
          text: @message.text
        )
        success_count += 1
        sleep(0.1) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É
      rescue => e
        error_count += 1
        puts "Broadcast error for user #{user.telegram_id}: #{e.message}"
      end
    end

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∞–¥–º–∏–Ω-–º–µ–Ω—é
    @bot.api.send_message(
      chat_id: @message.chat.id,
      text: "üì¢ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞\n‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: #{success_count}\n‚ùå –û—à–∏–±–æ–∫: #{error_count}",
      reply_markup: AdminKeyboard.menu
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –æ–±—ã—á–Ω—ã–π —Å—Ç–∞—Ç—É—Å
    @user.update(status: 'active')
  end

  def handle_user_message
    case @message.text
    when '/menu'
      UserKeyboard.show_main_menu(@bot, @message, @user)
    when 'üõí –ù–æ–≤—ã–π –∑–∞–∫–∞–∑', 'üõí ComandƒÉ nouƒÉ'
      handle_new_order
    when 'üìã –ú–æ–∏ –∑–∞–∫–∞–∑—ã', 'üìã Comenzile mele'
      handle_my_orders
    when 'üåê –ò–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫', 'üåê SchimbƒÉ limba'
      handle_change_language
    else
      OrderService.handle_order_step(@bot, @message, @user)
    end
  end

  def handle_new_order
    puts "Starting new order for user #{@user.id}"
    
    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    @user.update(status: 'filling_application')
    puts "User status updated to filling_application"

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤
    ProductKeyboard.show_products(@bot, @message, @user)
  end

  def handle_my_orders
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–∫–∞–∑—ã
    orders = @user.applications
                  .where.not(status: 'draft')
                  .where.not(quantity: nil)
                  .where.not(price: nil)
                  .order(created_at: :desc)
                  .limit(10)
    
    if orders.empty?
      @bot.api.send_message(
        chat_id: @message.chat.id,
        text: Messages::MESSAGES[@user.language][:no_orders]
      )
      return
    end

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑—ã –æ—Ç —Å—Ç–∞—Ä—ã—Ö –∫ –Ω–æ–≤—ã–º
    orders.reverse.each do |order|
      OrderService.show_order_details(@bot, @message, order)
      sleep(0.1) # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    end

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é –ø–æ—Å–ª–µ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤
    UserKeyboard.show_main_menu(@bot, @message, @user)
  end

  def handle_change_language
    UserKeyboard.show_language_selection(@bot, @message)
  end
end 